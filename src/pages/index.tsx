import React from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { api } from "@/utils/api";
import { Card } from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import Link from "next/link";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlus } from "@fortawesome/free-solid-svg-icons";
import { v4 as uuid } from "uuid";
import { useRouter } from "next/router";

const Home: NextPage = () => {
  const dashboardsQuery = api.dashboards.getAll.useQuery();
  const deleteDashboard = api.dashboards.delete.useMutation();
  const router = useRouter();

  async function onDashboardCreate() {
    const newId = uuid();
    await router.push(`/dashboard/${newId}`);
  }

  async function onDashboardDelete(id: string) {
    await deleteDashboard.mutateAsync({ id });
    await dashboardsQuery.refetch();
  }

  return (
    <>
      <Head>
        <title>Dashboard - QuickLinks</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center">
        <div className="container flex flex-col items-center justify-center gap-8 px-4 py-16">
          <div className="w-full">
            <h1 className="w-full text-4xl font-extrabold tracking-tight">
              QuickLinks
            </h1>
            <h2 className="text-2xl">Dashboard Directory</h2>
          </div>
          <div className="flex w-full max-w-2xl flex-col gap-8">
            <Button
              variant="ghost"
              onClick={() => void onDashboardCreate()}
              asChild
            >
              <Card className="flex w-full cursor-pointer flex-row items-center justify-between p-8">
                <h1 className="text-lg font-bold">Create New Dashboard</h1>
                <FontAwesomeIcon icon={faPlus} className="text-2xl" />
              </Card>
            </Button>
            {dashboardsQuery.isLoading && <p>Loading...</p>}
            {dashboardsQuery.isError && (
              <p className="text-center text-red-500">
                An error occured while fetching dashboards.
              </p>
            )}
            {dashboardsQuery.data?.length === 0 && (
              <p className="text-center text-gray-500">
                No dashboards found. Create a new dashboard using the button
                above.
              </p>
            )}
            {dashboardsQuery.data
              ?.sort((a, b) => b.createdAt.valueOf() - a.createdAt.valueOf())
              .map((dashboard) => (
                <Card
                  key={dashboard.id}
                  className="grid w-full grid-cols-4 p-6"
                >
                  <div className="col-span-3 flex flex-col">
                    <h1 className="text-lg font-bold">{dashboard.name}</h1>
                    <h2>ID: {dashboard.id}</h2>
                    <h2>Created: {dashboard.createdAt.toDateString()}</h2>
                  </div>
                  <div className="flex w-full flex-col gap-2">
                    <Button asChild>
                      <Link href={`/dashboard/${dashboard.id}`}>Launch</Link>
                    </Button>
                    <Button
                      onClick={() => void onDashboardDelete(dashboard.id)}
                      variant="destructive"
                    >
                      Delete
                    </Button>
                  </div>
                </Card>
              ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
