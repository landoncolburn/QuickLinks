import { api } from "@/utils/api";
import type { NextPage } from "next";
import { useRouter } from "next/router";
import React, { useState } from "react";
import Head from "next/head";
import Card from "@/components/Card";
import DashboardOptions from "@/components/DashboardOptions";
import QuickAction from "@/components/QuickAction";
import { CommandDialog } from "@/components/ui/command";
import { useHotkeys } from "react-hotkeys-hook";
import { z } from "zod";

const Dashboard: NextPage = () => {
  const router = useRouter();
  const dashboardId = router.query.id as string;

  console.log(dashboardId);

  const dashboard = api.dashboards.get.useQuery({ id: dashboardId });
  const cardsQuery = api.cards.getAll.useQuery({ id: dashboardId });

  const [dashboardTitle, setDashboardTitle] = useState("Dashboard");
  const [isQuickActionsOpen, setIsQuickActionsOpen] = React.useState(false);
  const [dashboardDescription, setDashboardDescription] = useState(
    "This is a dashboard."
  );

  useHotkeys("mod+k", () => setIsQuickActionsOpen(true));

  async function onCardAdded(): Promise<void> {
    await cardsQuery.refetch();
  }

  function onDashboardUpdate({
    title,
    description,
  }: {
    title: string;
    description: string;
  }): void {
    setDashboardTitle(title);
    setDashboardDescription(description);
  }

  return (
    <>
      <Head>
        <title>Dashboard - QuickLinks</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center">
        <div className="container flex flex-col items-center justify-center gap-8 px-4 py-16">
          <div className="w-full">
            <h1 className="w-full text-4xl font-extrabold tracking-tight">
              QuickLinks
            </h1>
            <div className="flex flex-row items-start gap-2">
              <h2 className="text-2xl">{dashboardTitle}</h2>
              <DashboardOptions
                onCardAdded={onCardAdded}
                onDashboardUpdate={onDashboardUpdate}
                title={dashboardTitle}
                description={dashboardDescription}
                dashboard={dashboardId}
              />
            </div>
          </div>

          <div className="grid w-full auto-rows-[12rem] grid-cols-6 gap-16">
            {cardsQuery.data?.map((card, i) => (
              <Card key={i} card={card} />
            ))}
          </div>
        </div>
        <CommandDialog
          open={isQuickActionsOpen}
          onOpenChange={setIsQuickActionsOpen}
        >
          <QuickAction />
        </CommandDialog>
      </main>
    </>
  );
};

export default Dashboard;
